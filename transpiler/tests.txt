set aCra_zyV4r: 'test'
-----
let aCra_zyV4r = 'test'
#############################
set aCra_zyV4r : 'test'
-----
let aCra_zyV4r = 'test'
#############################
set b: 10
; a comment
set c: 20
-----
let b = 10
let c = 20
#############################
define even(a)
    a % 2 = 0
-----
function even(a) {
    return a % 2 === 0
}
#############################
define even(a, b,c)
    set b: 20
    ; inline indented comment
    a % b = 0
-----
function even(a, b,c) {
    let b = 20
    return a % b === 0
}
#############################
x is even?
    b: 10
-----
if (even(x)) {
    b = 10
}
#############################
x is not even?
    b: 10
-----
if (!even(x)) {
    b = 10
}
#############################
x,y, z are same?
    b: 10
-----
if (same(x,y, z)) {
    b = 10
}
#############################
x < 10?
    x: 10
-----
if (x < 10) {
    x = 10
}
#############################
x < 10 and y > 10?
    x: 10
-----
if (x < 10 && y > 10) {
    x = 10
}
#############################
x and y are even?
    x: 10
    y: 10
-----
if (even(x) && even(y)) {
    x = 10
    y = 10
}
#############################
x,y and z, w are same?
    x: y: 10
    z: w: 20
-----
if (same(x,y) && same(z, w)) {
    x = y = 10
    z = w = 20
}
#############################
x,y and z, w are not same?
    x: y: 10
    z: w: 20
-----
if (!same(x,y) && !same(z, w)) {
    x = y = 10
    z = w = 20
}
#############################
1->10
-----
[...range(1, 10)]
#############################
(a - 1) -> (b - 1)
-----
[...range((a - 1), (b - 1))]
#############################
abc -(+10)-> efg
-----
[...range(abc, efg, +10)]
#############################
(abc / 2) -(+10)-> (efg + hij - 1)
-----
[...range((abc / 2), (efg + hij - 1), +10)]
#############################
(abc / 2) -(+10)-> (efg + hij - 1)
-----
[...range((abc / 2), (efg + hij - 1), +10)]
#############################
loop 1 -> 10 as i
    x: x + 10
-----
#############################
loop forever
    x: x + 10
    stop
-----
while (1) {
    x = x + 10
    break;
}
#############################
(doStuff)
-----
doStuff()
#############################
(print 'test')
-----
print('test')
#############################
(format [1,2,3])
-----
format([1,2,3])
#############################
(add (get5), (add 10, 2), (add 23, (add 55,6)))
-----
add(get5(), add(10, 2), add(23, add(55,6)))
#############################
(a - b)
-----
(a - b)
#############################
(a.push 10)
-----
a.push(10)
#############################
a: [1,2,3,4]
-----
a = [1,2,3,4]
#############################
.xyz: 10
-----
this.xyz = 10
#############################
define Person
    walk()
        .x: 10

    jump(height)
        .y: height
-----
class Person {
    walk() {
        this.x = 10
    }

    jump(height)
        this.y = height
}
#############################
define Dog from Animal
    walk()
        .x: .x + 1
-----
class Person extends Animal {
    walk() {
        return this.x = this.x + 1
    }
}
#############################
define Human
    greet()
        (.say 'Hello')
-----
class Human {
    greet() {
        return this.say('Hello')
    }
}
#############################
